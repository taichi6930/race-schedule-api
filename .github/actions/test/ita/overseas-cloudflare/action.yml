name: "ITa Test (Cloudflare)"
description: "Run ITa tests against Cloudflare worker (incremental: install deps)"

runs:
  using: "composite"
  steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up pnpm
      uses: pnpm/action-setup@v2
      with:
        version: '9.10.0'

    - name: Install dependencies
      run: pnpm install
      shell: bash

    - name: Create wrangler.toml (temp)
      run: |
        printf '%s
        ' "name = \"race-schedule-local\"" \
          "main = \"./lib/src/index.ts\"" \
          "compatibility_date = \"2025-01-01\"" \
          "# enable Node.js built-in module compatibility (path, stream, etc.) for local dev" \
          "compatibility_flags = [\"nodejs_compat\"]" \
          "" \
          "[vars]" \
          "ENV = \"GITHUB_ACTIONS_CI\"" \
          "" \
          "[env.development]" \
          "main = \"./lib/src/index.ts\"" \
          "compatibility_date = \"2025-01-01\"" \
          "compatibility_flags = [\"nodejs_compat\"]" \
          "" \
          "[env.development.vars]" \
          "ENV = \"GITHUB_ACTIONS_CI\"" \
          "" \
          "# D1 database binding for development environment" \
          "[[env.development.d1_databases]]" \
          "binding = \"MY_DB\"" \
          "database_name = \"my-database\"" \
          "database_id = \"my-database\"" \
          "" \
          "[[d1_databases]]" \
          "binding = \"MY_DB\"" \
          "database_name = \"my-database\"" \
          "# For wrangler config, d1 database bindings require a database_id field" \
          "database_id = \"my-database\"" > wrangler.toml
      shell: bash

    - name: Apply D1 migrations (local)
      run: |
        # run migrations locally; if no migrations exist this will still exit zero in many setups
        pnpm run wrangler:d1:migrations:apply:local || true
      shell: bash

    - name: Debug .env and runner ENV (temp)
      run: |
        echo "Listing .env file (if present):"
        ls -la .env || true
        echo "--- .env contents ---"
        sed -n '1,200p' .env || true
        echo "--- node process.env.ENV (from runner) ---"
        node -e "console.log(process.env.ENV || '')" || true
        echo "--- shell export and printenv check ---"
        export ENV=GITHUB_ACTIONS_CI
        echo "exported ENV=$ENV"
        printenv | grep -i '^ENV=' || true
      shell: bash

    - name: Create .env (temp)
      run: |
        printf '%s
        ' "ENV=GITHUB_ACTIONS_CI" > .env
      shell: bash

    - name: Start wrangler dev in background and wait for /health
      run: |
        # set ENV expected by the worker and start wrangler in local mode
        ENV=GITHUB_ACTIONS_CI TZ=Asia/Tokyo pnpm run dev:cloudflare:local &
        # wait for health endpoint
        for i in {1..24}; do
          curl --silent --head http://127.0.0.1:8787/health && break || true
          echo "Waiting for wrangler dev to start... ($i)"
          sleep 5
        done
      shell: bash

    - name: Simple health check
      run: |
        curl -sS --fail http://127.0.0.1:8787/health
      shell: bash

    - name: Curl API for Overseas Race
      run: |
        BASE=http://127.0.0.1:8787

        # Initial GET request
        response=$(curl -s -X 'GET' "${BASE}/api/races/all/race?startDate=2024-10-01&finishDate=2024-11-01&raceType=overseas" -H 'accept: application/json')

        # Initial GET Response Check
        overseas_items=$(echo "$response" | jq 'if type=="object" and has("OVERSEAS") then .OVERSEAS else . end')
        if [[ "$overseas_items" != "[]" ]]; then
          echo "❌ Initial GET request failed. Expected [], but got $response"
          exit 1
        fi

        # POST request
        post_response=$(curl -s -o /dev/null -w "%{http_code}" -X 'POST' "${BASE}/api/races/all/race" -H 'accept: */*' -H 'Content-Type: application/json' -d '{"startDate":"2024-10-01","finishDate":"2024-11-01","raceType":["overseas"]}')

        # POST Response Check
        if [[ "$post_response" != "200" ]]; then
          echo "❌ POST request failed with status code $post_response"
          exit 1
        fi

        # Updated GET request
        response=$(curl -s -X 'GET' "${BASE}/api/races/all/race?startDate=2024-10-01&finishDate=2024-11-01&raceType=overseas" -H 'accept: application/json')

        # Final GET Response Check: 要素数が372個であることを確認
        item_count=$(echo "$response" | jq 'if type=="object" and has("OVERSEAS") then .OVERSEAS | length else length end')
        if [[ "$item_count" -ne 372 ]]; then
          echo "❌ Updated GET request failed. Expected 372 items but got $item_count items."
          exit 1
        fi

        echo "✅ Overseas Race checks passed successfully."
      shell: bash

    - name: Curl API for Overseas Calendar
      run: |
        BASE=http://127.0.0.1:8787

        # Initial GET request
        response=$(curl -s -X 'GET' "${BASE}/api/races/all/calendar?startDate=2024-10-01&finishDate=2024-11-01&raceType=overseas" -H 'accept: application/json')

        # Initial GET Response Check
        overseas_items=$(echo "$response" | jq 'if type=="object" and has("OVERSEAS") then .OVERSEAS else . end')
        if [[ "$overseas_items" != "[]" ]]; then
          echo "❌ Initial GET request failed. Expected [], but got $response"
          exit 1
        fi

        # POST request
        post_response=$(curl -s -o /dev/null -w "%{http_code}" -X 'POST' "${BASE}/api/races/all/calendar" -H 'accept: */*' -H 'Content-Type: application/json' -d '{"startDate":"2024-10-01","finishDate":"2024-11-01","raceType":["overseas"]}')

        # POST Response Check
        if [[ "$post_response" != "200" ]]; then
          echo "❌ POST request failed with status code $post_response"
          exit 1
        fi

        # Updated GET request
        response=$(curl -s -X 'GET' "${BASE}/api/races/all/calendar?startDate=2024-10-01&finishDate=2024-11-01&raceType=overseas" -H 'accept: application/json')

        # Final GET Response Check: 要素数が372個であることを確認
        item_count=$(echo "$response" | jq 'if type=="object" and has("OVERSEAS") then .OVERSEAS | length else length end')
        if [[ "$item_count" -ne 372 ]]; then
          echo "❌ Updated GET request failed. Expected 372 items but got $item_count items."
          exit 1
        fi

        echo "✅ Overseas Calendar checks passed successfully."
      shell: bash

    # Next steps (to add later): create wrangler.toml, run D1 migrations, start wrangler dev, run curl tests
