import type { IRecord } from '../record/iRecord';

/**
 * Amazon S3ストレージサービスとの連携を担当するゲートウェイインターフェース
 *
 * このインターフェースは、アプリケーションのデータをS3に保存・取得する
 * 機能を提供します。主な責務：
 * - データのアップロード（CSV形式での保存）
 * - データのダウンロード（文字列形式での取得）
 *
 * 特徴：
 * - バケット単位でのデータ管理
 * - ファイル名による一意のデータ識別
 * - CSV形式でのデータシリアライゼーション
 * - エラー時の適切なエラーハンドリング
 *
 * 注意事項：
 * - ファイル名は一意である必要があります
 * - データは必ずCSV形式で保存されます
 * - 大規模なデータの場合はストリーミング処理を考慮
 * @typeParam T - 保存/取得するデータの型。IRecordを実装している必要があります。
 *               これにより、データの一貫性とシリアライズ可能性を保証します。
 */
export interface IS3Gateway<T extends IRecord<T>> {
    /**
     * データをS3バケットにアップロードします
     *
     * このメソッドは以下の処理を行います：
     * 1. データをCSV形式にシリアライズ
     * 2. 指定されたファイル名でS3にアップロード
     * 3. 既存のファイルが存在する場合は上書き
     * @param data - アップロードするデータの配列。各要素はIRecordを実装
     * @param fileName - 保存先のファイル名（例: "jra/raceList.csv"）
     * @throws Error 以下の場合にエラーが発生：
     *               - S3への接続に失敗
     *               - データのシリアライズに失敗
     *               - アップロード処理に失敗
     *               - 認証/認可エラー
     */
    uploadDataToS3: (data: T[], fileName: string) => Promise<void>;
    /**
     * S3バケットからデータを取得します
     *
     * このメソッドは以下の処理を行います：
     * 1. 指定されたファイルをS3から取得
     * 2. データを文字列として読み込み
     * @param fileName - 取得するファイルの名前（例: "jra/raceList.csv"）
     * @returns ファイルの内容を文字列として返します。
     * CSVファイルの場合、各行が改行で区切られた文字列となります。
     * @throws Error 以下の場合にエラーが発生：
     *               - S3への接続に失敗
     *               - 指定されたファイルが存在しない
     *               - ファイルの読み込みに失敗
     *               - 認証/認可エラー
     */
    fetchDataFromS3: (fileName: string) => Promise<string>;
}
